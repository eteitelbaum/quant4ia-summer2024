{
  "hash": "00f04bda117dfa27814313091031f008",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Working With Data in R\ndate: today\ndate-format: long\nfooter: \"[IAFF 6501 Website](https://quant4ia.rocks)\"\nlogo: images/dataviz-logo.png\nformat:\n  revealjs:\n    theme: [simple, custom.scss]\n    transition: fade\n    slide-number: true\n    #multiplex: true\n    chalkboard: true\nexecute:\n  echo: false\n  message: false\n  warning: false\n  freeze: auto\n---\n\n\n\n## What are Tidy Data?\n\n<br>\n\n- Each column represents a single variable\n- Each row represents a single observation\n- Each cell represents a single value\n\n## Tidy Data Example\n\n![](images/tidy_data.jpg){fig-align=\"center\"}\n\n## What are Clean Data?\n\n- Column names are easy to work with and are not duplicated\n- Missing values have been dealt with\n- There are no repeated observations or columns\n- There are no blank observations or columns\n- The data are in the proper format\n  - For example dates should be formatted as dates\n\n## Messy Data Example\n\n![](images/messy_wb_data.jpg){fig-align=\"center\" width=70%}\n\n## Let's Download Some Messy Data\n\n<br>\n\n- Produce a folder called \"data\" in your course modules project folder\n- Download some messy WB data from WB \n- Make it one variable other than FLFP\n- Download as a CSV file with a unique file name and store in your data folder\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"time1\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n## Let's Read the Data Into R\n\n<br>\n\nStore the data as an **object** with `read_csv()` from the `readr` package:\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load readr\nlibrary(readr) \n\n# Read data from csv file into an object called \"wb_data_messy\"\nwb_data_messy <- read_csv(\"data/your_file_name.csv\")\n```\n:::\n\n\n\n## What is in That Data Frame?\n\n<br>\n\nYou can view data columns and column types with `dplyr` `glimpse()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load dplyr\nlibrary(dplyr) \n\n# View the data\nglimpse(wb_data_messy)\n```\n:::\n\n\n\nAlso try viewing with `View(\"wb_data_messy\")` or by clicking on the object in the Environment field.\n\n## How Can We Fix It? \n\n<br>\n\n- Pivot the data from wide to long form\n- Change year and data to numeric \n- Clean up the column names\n\n## Pivot Longer\n\n<br>\n\n`pivot_longer()` takes three arguments:\n\n- **cols** - which columns you want to pivot\n- **names_to** - the name of the column where the old column names are going to (identifier)\n- **values_to** - the name of the column where the values are going to\n\n## Let's Fill in the Blanks\n\n<br>\n\nCan you get `pivot_longer()` to work? \n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load tidyr\nlibrary(tidyr)\n\n# Reshape the data\n  ___    <- ___   |>\n  pivot_longer(\n    cols = ___\n    names_to = ___\n    values_to = ___\n  )\n\nglimpse()\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer2\" data-update-every=\"1\" tabindex=\"0\" style=\"top:10%;right:0%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n## Solution\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load tidyr\nlibrary(tidyr)\n\n# Reshape the data\nwb_data <- wb_data_messy |> \n  pivot_longer(             \n    cols = `1973 [YR1973]`: `2022 [YR2022]`, # columns to pivot\n    names_to = \"year\", # new identifier column\n    values_to = \"flfp\" # column with numeric values\n  ) \n\n# View the data\nglimpse(wb_data)\n```\n:::\n\n\n\n## Now Let's Change Variables to Numeric\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fix year and flfp\nwb_data <- wb_data |> # replace original data frame \n  mutate(year = substring(year, 1, 4)) |> # truncate year\n  mutate_at(c(\"year\", \"flfp\"), as.numeric) # change vars to numeric\n\n# View the data\nglimpse(wb_data)\n```\n:::\n\n\n\n- `mutate` is used to change (or create) a single variable \n- `mutate_at()` is used to make changes to multiple variables at once\n\n## Then We Can Clean Our Variable Names\n\n<br>\n\nVery simple: use `clean_names()` from the `janitor` package!\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load janitor\nlibrary(janitor)\n\n# Apply clean_names() to wb_data, store in new data frame called wb_data_clean\nwb_data_clean <- wb_data |>  \n  clean_names() \n```\n:::\n\n\n\n## Write as CSV to New File\n\n<br>\n\nUse `write_csv()` from `readr` to save the clean data. \n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Write wb_data_clean to a csv file\nwrite_csv(wb_data_clean, \"data/wb_data_clean.csv\")\n\n# View the data\nglimpse(wb_data_clean)\n```\n:::\n\n\n\n## What About Multiple Variables?\n  \n![](images/multiple_vars.png){fig-align=\"center\" width=70%}\n  \n## Step 1: Pivot Years Into One Column\n\n<br>\n\nUse `pivot_longer()` to get the years into one column and the values into another like we did before, but label the numeric column \"values\":\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"6\"}\n# Reshape the data\nwb_data <- wb_data_messy |> \n  pivot_longer(             \n    cols = `1973 [YR1973]`: `2022 [YR2022]`, # columns to pivot\n    names_to = \"year\", # new identifier column\n    values_to = \"values\" # column with numeric values\n  ) \n\n# View the data\nglimpse(wb_data)\n```\n:::\n\n\n\n\n## Step 2: Pivot Series Into Columns\n\n<br>\n\nNow drop series name and use `pivot_wider()` to separate the series into separate columns:\n  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nwb_data_multicolum <- messy_multicolumn_df |>\n  select(-`Series Name`) # dropping series name\n\n# Reshape the data\ntidy_data <- wb_data_multicolumn |> \n  pivot_wider(             \n    names_from = `Series Code`, # column with series names\n    values_from = \"values\" # column with numeric values\n  ) \n\n# View the data\nglimpse(wb_data)\n```\n:::\n\n\n\n## What if We Have Data in an Excel File?\n\n<br>\n\n- Follow same steps as with CSV file, but use `read_excel()` to read in the data instead of `read_csv`\n- The `readr` [cheatsheet](https://github.com/rstudio/cheatsheets/blob/main/data-import.pdf) is helpful in figuring out stuff like this!\n\n## Ten Minute Challenge!\n\n- Download more than one variable from the WB in Excel\n- Use pivot longer to put years in one column and values in another\n- Use pivot wider to separate the series into columns\n- Change variable names \n- Change variable types\n- Clean variable names \n- Save clean data as new Excel file\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer3\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}