{
  "hash": "f71008634d07883aae3888acf1b834ff",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Reactivity\"\ndate: today\ndate-format: long\nfooter: \"[DataViz 2102 Website](https://dataviz-gwu.rocks)\"\nlogo: images/dataviz-logo.png\nformat:\n  revealjs:\n    theme: [simple, custom.scss]\n    transition: fade\n    slide-number: true\n    multiplex: true\n    chalkboard: true\nexecute:\n  echo: false\n  message: false\n  warning: false\n  freeze: auto\n---\n\n\n## What is Reactivity?\n\n<br>\n\n- Reactivity in Shiny apps refers to the ability to update the user interface based on changes to input values.\n- R functions are used to update different parts of the app when they receive new values from the user.\n\n## Reactivity in Action\n\n<br>\n\n- For instance, in a Shiny app, the `renderPlot()` function can update a plot based on a selected year, variable or country case.\n- Reactivity allows for rendering various elements like tables, images, or text without a full page reload.\n- The UI is dynamically updated, quickly generating new content based on the updated data.\n\n## Two Steps to Displaying Reactive Content\n\n<br>\n\n- Add an R object to your user interface.\n- Tell Shiny how to build the object in the server function. \n- The object is reactive if it calls a widget value (an input).\n\n## Step 1: Add the Object to the UI\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"15-18\"}\n# Define UI for application that draws a scatter plot\nui <- fluidPage(\n\n    # Application title\n    titlePanel(\"Democracy and Development\"),\n\n    # Sidebar with a two dropdown menus\n    sidebarLayout(\n      sidebarPanel(\n        selectInput(input = 'xcol', label = 'X Variable', choices = vars),\n        selectInput(input = 'ycol', label = 'Y Variable', \n                    choices = vars, selected = vars[[6]])\n      ),\n\n        # Display the scatterplot \n        mainPanel(\n           plotOutput(\"scatterplot\")\n        )\n    )\n)\n```\n:::\n\n\n## Step 2: Build the Object in the Server Function\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define server logic required to draw a scatter plot\nserver <- function(input, output, session) {\n  \n  # Render the plot\n  output$scatterplot <- renderPlot({\n    \n    # ggplot call\n    ggplot(dem_data, aes(x = get(input$xcol), y = get(input$ycol))) +\n      geom_point(aes(color = region)) +\n      geom_smooth(method = \"loess\") +\n      scale_color_viridis_d(option = \"plasma\") +\n      theme_minimal() +\n      labs(\n        x =  names(vars[which(vars == input$xcol)]), # select names in vars that\n        y =  names(vars[which(vars == input$ycol)]), # match input selections\n        caption = \"Source: V-Dem Institute\",\n        color = \"Region\"\n      )\n  })\n}\n```\n:::\n\n\n## Reactive Because it is Calls a Widget Value (Server)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"8\"}\n# Define server logic required to draw a scatter plot\nserver <- function(input, output, session) {\n  \n  # Render the plot\n  output$scatterplot <- renderPlot({\n    \n    # ggplot call\n    ggplot(dem_data, aes(x = get(input$xcol), y = get(input$ycol))) +\n      geom_point(aes(color = region)) +\n      geom_smooth(method = \"loess\") +\n      scale_color_viridis_d(option = \"plasma\") +\n      theme_minimal() +\n      labs(\n        x =  names(vars[which(vars == input$xcol)]), # select names in vars that\n        y =  names(vars[which(vars == input$ycol)]), # match input selections\n        caption = \"Source: V-Dem Institute\",\n        color = \"Region\"\n      )\n  })\n}\n```\n:::\n\n\n## Reactive Because it is Calls a Widget Value (UI)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"10-11\"}\n# Define UI for application that draws a scatter plot\nui <- fluidPage(\n\n    # Application title\n    titlePanel(\"Democracy and Development\"),\n\n    # Sidebar with a two dropdown menus\n    sidebarLayout(\n      sidebarPanel(\n        selectInput(input = 'xcol', label = 'X Variable', choices = vars),\n        selectInput(input = 'ycol', label = 'Y Variable', \n                    choices = vars, selected = vars[[6]])\n      ),\n\n        # Display the scatterplot \n        mainPanel(\n           plotOutput(\"scatterplot\")\n        )\n    )\n)\n```\n:::\n\n\n## Render Functions in Shiny {.smaller}\n\n<br>\n\n| Render Function    | Creates                                           |\n|--------------------|---------------------------------------------------|\n| `renderDataTable`  | DataTable                                         |\n| `renderImage`      | Images (saved as a link to a source file)         |\n| `renderPlot`       | Plots                                             |\n| `renderPrint`      | Any printed output                                |\n| `renderTable`      | Data frame, matrix, other table-like structures   |\n| `renderText`       | Character strings                                 |\n| `renderUI`         | A Shiny tag object or HTML                        |\n\n## Output Functions in Shiny {.smaller}\n\n<br>\n\n| Output Function       | Creates    |\n|-----------------------|------------|\n| `dataTableOutput`     | DataTable  |\n| `htmlOutput`          | Raw HTML   |\n| `imageOutput`         | Image      |\n| `plotOutput`          | Plot       |\n| `tableOutput`         | Table      |\n| `textOutput`          | Text       |\n| `uiOutput`            | Raw HTML   |\n| `verbatimTextOutput`  | Text       |\n\n## Limiting Reactivity\n\n- **Reactive Expressions Control Reactivity**: Limit what is re-executed during a reaction by using reactive expressions.\n- **Definition and Behavior**: A reactive expression in R leverages widget input to return a value, updating itself whenever the input widget changes.\n- **Creating a Reactive Expression**: Utilize the `reactive` function, similar to `render*` functions, which encapsulates an R expression within braces.\n\n## Example from this Week\n\n<iframe src=\"https://emmanuelteitelbaum.shinyapps.io/fred_app/\" width=\"780\" height=\"500\" data-external=\"1\"></iframe>\n\n## Example from this Week\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n    # Download data from FRED with reactive function. \n    # Only updates when user selects new indicator\n    fred_indicator <- reactive({\n      fredr(series_id = input$indicator,\n        observation_start = start_date,\n        observation_end = end_date)\n    })\n  \n    # Filter data according to chosen years \n    # Only updates when user selects new data range\n    fred_data <- reactive({\n      fred_indicator() |>\n      filter(between(date, input$range[1],input$range[2])) \n   })\n```\n:::\n\n\n## Your Turn! {.smaller}\n\n<br>\n\n- Do the prework, getting set up with `fredr` and other relevant packages\n- Create a NEW project folder\n- Save your helper script in a subfolder\n- Start on your app.R file\n- Four parts:\n  - setup\n  - UI\n  - Server\n  - Call to Shiny App\n- Extend the app by incorporating new indicators\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}