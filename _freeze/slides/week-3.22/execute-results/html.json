{
  "hash": "645e086ea741b04c13174d753850fbe8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Merging and Summarizing Data\ndate: today\ndate-format: long\nfooter: \"[DataViz 2102 Website](https://dataviz-gwu.rocks)\"\nlogo: images/dataviz-logo.png\nformat:\n  revealjs:\n    theme: [simple, custom.scss]\n    transition: fade\n    slide-number: true\n    multiplex: true\n    chalkboard: true\nexecute:\n  echo: false\n  message: false\n  warning: false\n  freeze: auto\n---\n\n\n# Merging Data\n\n## Merging Data Frames\n\n- Often we have data from two different sources\n- Results in two data frames\n- How to make them one so we can analyze? \n- Key questions\n  - What is the unit of analysis? \n  - What is/are the corresponding identifier variables?\n  - Are the identifier variables in common? \n  - Or do they have to be added/transformed to match?\n  \n## Merging WB and V-Dem Data\n\n- These are both time-series, country-level data\n- Need to merge by country-year\n- Year is easy\n- But there are many different country codes\n- Can use `countrycode` package to assign country codes\n\n## `countrycode` Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load countrycode\nlibrary(countrycode)\n\n# Create new iso3c variable\ndemocracy <- democracy |>    \n  mutate(iso3c = countrycode(sourcevar = vdem_ctry_id, # what we are converting\n        origin = \"vdem\",         # we are converting from vdem\n        destination = \"wb\"))  |> # and converting to the WB iso3c code \n  relocate(iso3c, .after = vdem_ctry_id) # move iso3c \n\n# View the data\nglimpse(democracy)\n```\n:::\n\n\n## Try it Yourself\n\n- Using your democracy data frame from the last lesson\n- Use `mutate()` and `countrycode()` to add iso3c country codes\n- Use `relocate` to move your iso3c code to the \"front\" of your data frame (optional)\n\n## Types of Joins in `dplyr`\n\n- Mutating versus filtering joins\n- Four types of mutating joins\n  - `inner_join()`\n  - `full_join()`\n  - `left_join()`\n  - `right_join()`\n- For the most part we will use `left_join()`\n\n## `left_join()` Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load readr\nlibrary(readr)\n\n# Perform left join using common iso3c variable and year\ndem_women <- left_join(democracy, women_emp, by = c(\"iso3c\", \"year\")) |> \n  rename(country = country.x) |> # rename country.x\n  select(!country.y)             # crop country.y\n\n# Save as .csv for future use\nwrite_csv(dem_women, \"data/dem_women.csv\")\n\n# View the data\nglimpse(dem_women)  \n```\n:::\n\n\n## Try it Yourself\n\n- Take your V-Dem data frame and your World Bank data frame\n- Using `left_join()` to merge on country code and year\n- Along the way, use `rename()` and `select()` to insure you have just one country name\n\n\n# Your First Calculations\n\n## Group, Summarize and Arrange\n\n- `group_by()`, `summarize()`, `arrange()`\n- A very common sequence of `dplyr` verbs:\n  - Take an average or some other statistic for a group\n  - Rank from high to low values of summary value\n  \n## Example: Take Averages by Region\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# group_by(), summarize() and arrange()\ndem_region <- democracy |> # save result as new object\n  group_by(region)  |> # group data by region\n  summarize(           # summarize following vars (by region)\n    polyarchy = mean(polyarchy, na.rm = TRUE), # calculate mean, remove NAs\n    gdp_pc = mean(gdp_pc, na.rm = TRUE)\n  ) |> \n  arrange(desc(polyarchy)) # arrange in descending order by polyarchy score\n\n# Save as .csv for future use\nwrite_csv(dem_region, \"data/dem_summary.csv\")\n\n# View the data\nglimpse(dem_summary)\n```\n:::\n\n\n##\n\nUse `group_by()` to group all data across countries and years by region...\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\n# group_by(), summarize() and arrange()\ndem_region <- democracy |> # save result as new object\n  group_by(region)  |> # group data by region\n  summarize(           # summarize following vars (by region)\n    polyarchy = mean(polyarchy, na.rm = TRUE), # calculate mean, remove NAs\n    gdp_pc = mean(gdp_pc, na.rm = TRUE)\n  ) |> \n  arrange(desc(polyarchy)) # arrange in descending order by polyarchy score\n\n# Save as .csv for future use\nwrite_csv(dem_region, \"data/dem_summary.csv\")\n\n# View the data\nglimpse(dem_summary)\n```\n:::\n\n\n##\n\nUse `summarize()` to get the regional means polyarchy and gpd_pc....\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4-7\"}\n# group_by(), summarize() and arrange()\ndem_region <- democracy |> # save result as new object\n  group_by(region)  |> # group data by region\n  summarize(           # summarize following vars (by region)\n    polyarchy = mean(polyarchy, na.rm = TRUE), # calculate mean, remove NAs\n    gdp_pc = mean(gdp_pc, na.rm = TRUE)\n  ) |> \n  arrange(desc(polyarchy)) # arrange in descending order by polyarchy score\n\n# Save as .csv for future use\nwrite_csv(dem_region, \"data/dem_summary.csv\")\n\n# View the data\nglimpse(dem_summary)\n```\n:::\n\n\n## \n\nThen use `arrange()` with `desc()` to sort in descending order by polyarchy score...\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"8\"}\n# group_by(), summarize() and arrange()\ndem_region <- democracy |> # save result as new object\n  group_by(region)  |> # group data by region\n  summarize(           # summarize following vars (by region)\n    polyarchy = mean(polyarchy, na.rm = TRUE), # calculate mean, remove NAs\n    gdp_pc = mean(gdp_pc, na.rm = TRUE)\n  ) |> \n  arrange(desc(polyarchy)) # arrange in descending order by polyarchy score\n\n# Save as .csv for future use\nwrite_csv(dem_region, \"data/dem_summary.csv\")\n\n# View the data\nglimpse(dem_summary)\n```\n:::\n\n\n## Try it Yourself {.scrollable}\n\n- Try running a `group_by()`, `summarize()` and `arrange()` in your Quarto document\n- Try changing the parameters to answer these questions: \n\n1. Try summarizing the data with a [different function](https://dplyr.tidyverse.org/reference/summarise.html#useful-functions) for one or more of the variables. \n  a. What is the median value of `polyarchy` for The West?\n  b. What is the max value of `gdp_pc` for Eastern Europe?\n  \n2. Now try grouping by country instead of region. \n\n  a. What is the median value of `polyarchy` for Sweden?\n  b. What is the max value of `gdp_pc` New Zealand?\n\n3. Sort countries in descending order based on the mean value of `gdp_pc` (instead of the median value of `polyarchy`). Which country ranks first based on this sorting?\n\n4. Now try sorting countries in ascending order based on the median value of `polyarchy` (hint: delete \"desc\" from the `arrange()` call). Which country ranks at the \"top\" of the list?\n\n5. Time permitting, rerun your code using the data you wrangled on your own from the previous exercise. What interesting observations can you make about the data?\n\n# Choropleth Maps",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}