---
title: Visualizing Data
date: today
date-format: long
footer: "[IAFF 6501 Website](https://quant4ia.rocks)"
logo: images/iaff6501-logo.png
format:
  revealjs:
    theme: [simple, custom.scss]
    transition: fade
    slide-number: true
    #multiplex: true
    chalkboard: true
execute:
  echo: false
  message: false
  warning: false
  freeze: auto
---

```{r}
#| label: setup
#| include: false

library(tidyverse)
library(vdemdata)
library(plotly)
library(WDI)

theme_set(theme_minimal())
```


```{r}
#| label: vdem_setup
#| include: false

polyarchy_annual <- vdem %>%
  group_by(year) %>%
  summarize(
    polyarchy = mean(v2x_polyarchy, na.rm = TRUE),
    gdp_pc = mean(e_gdppc, na.rm = TRUE)*1000
  ) %>%
  mutate(
    wave = case_when(year <= 1827 ~ "pre 1st wave",
                       year > 1827 & year <= 1926 ~ "1st wave", 
                       year > 1926 & year <= 1945 ~ "1st rev. wave",
                       year > 1945 & year <= 1962 ~ "2nd wave", 
                       year > 1962 & year <= 1973 ~ "2nd rev. wave", 
                       year > 1973 & year <= 2010 ~ "3rd wave", 
                       year > 2010 ~ "3rd rev. wave") %>%
      factor(levels = c("pre 1st wave", "1st wave", "1st rev. wave",
                        "2nd wave", "2nd rev. wave", "3rd wave", "3rd rev. wave"))
  ) %>%
  drop_na()
```


# Reading Data into R

## Getting Started with Data {.smaller}

<br>

::: {.incremental}
- *Tabular data* is data that is organized into rows and columns
  - a.k.a. *rectangular data*
- A *data frame* is a special kind of tabular data used in data science
- A *variable* is something you can measure 
- An *observation* is a single unit or case in your data set
- The *unit of analysis* is the level at which you are measuring
  - In a cross-section: country, state, county, city, individual, etc.
  - In a time-series: year, month, day, etc.
:::

## Example

![](images/tidy_data.jpg){fig-align="center"}

## Some Basic R Code {.smaller}

<br>

::: {.incremental}
- `<-` is the assignment operator
  - Use it to assign values to objects
- `#` is the comment operator
  - Use it to comment out code or add comments
  - Different function than in markdown text
- To call a library, use `library()` and name of library
  - name of library does not have to be in quotes, e.g. `library(readr)`
  - only when you install it, e.g. `install.packages("readr")`
:::

## Read Data into R

<br>

```{r}
#| label: read_data1
#| echo: true
#| eval: false
#| code-line-numbers: "|1|2-3|5"

# load libraries
library(readr)
library(dplyr)

dem_summary <- read_csv("data/dem_summary.csv")
```

## Viewing the Data in R

<br>

Use `glimpse()` to see the columns and data types:

```{r}
#| label: read_data2
#| echo: true
#| code-line-numbers: "7"

# load libraries
library(readr)
library(dplyr)

dem_summary <- read_csv("data/dem_summary.csv")

glimpse(dem_summary)
```

# 

Or use `View()` or click on the name of the object in your Environment tab to see the data in a spreadsheet:

![](images/view_df.gif){fig-align="center"}

## Try It Yourself!

- Open the CSV file to see what it looks like
- Then use this code to read it into R and view it

```{r}
#| label: read_data3
#| echo: true
#| eval: false

# load libraries
library(readr)
library(dplyr)

dem_summary <- read_csv("data/dem_summary.csv")

glimpse(dem_summary)
```

```{r}
#| label: timer1
library(countdown)
countdown(minutes = 5, 
          id = "timer1", 
          bottom = "10%", 
          right = "10%",
          color_border = "#fff",
          color_text = "#fff",
          color_running_background = "#42affa",
          color_running_text = "black",
          color_finished_background = "#E5D19D",
          color_finished_text = "#00264A")
```

# Bar Charts

## The Grammar of Graphics

::: {.incremental}
- Data viz has a language with its own grammar
- Basic components include:
  - Data we are trying to visualize
  - Aesthetics (dimensions)
  - Geom (e.g. bar, line, scatter plot)
  - Color scales
  - Themes
  - Annotations
::: 
  
## 

<br>

Let's start with the first two, the data and the aesthetic...

<br>

```{r}
#| label: barchart1
#| echo: true
#| output: false
#| code-line-numbers: "6"

library(readr)
library(ggplot2)

dem_summary <- read_csv("data/dem_summary.csv")

ggplot(dem_summary, aes(x = region, y = polyarchy)) 
```

##

This gives us the axes without any visualization:

```{r}
#| label: barchart2

ggplot(dem_summary, aes(x = region, y = polyarchy)) 
```


##

<br>

Now let's add a geom. In this case we want a bar chart so we *add* `geom_col()`.

<br>

```{r}
#| label: barchart3
#| echo: true
#| output: false

ggplot(dem_summary, aes(x = region, y = polyarchy)) + 
  geom_col()
```

## 

That gets the idea across but looks a little depressing, so...

```{r}
#| label: barchart4

ggplot(dem_summary, aes(x = region, y = polyarchy)) + 
  geom_col()
```

## 

<br>

...let's change the color of the bars by specifying `fill = "steelblue"`.

<br>

```{r}
#| label: barchart5
#| echo: true
#| output: false
#| code-line-numbers: "2"

ggplot(dem_summary, aes(x = region, y = polyarchy)) + 
  geom_col(fill = "steelblue")
```

## 

Note how color of original bars is simply overwritten:

```{r}
#| label: barchart6

ggplot(dem_summary, aes(x = region, y = polyarchy)) + 
  geom_col(fill = "steelblue")
```

## 

<br>

Now let's *add* some labels with the `labs()` function:

<br>

```{r}
#| label: barchart7
#| echo: true
#| output: false
#| code-line-numbers: "3-8"

ggplot(dem_summary, aes(x = region, y = polyarchy)) + 
  geom_col(fill = "steelblue") +
  labs(
    x = "Region", 
    y = "Avg. Polyarchy Score", 
    title = "Democracy by region, 1990 - present", 
    caption = "Source: V-Dem Institute"
    )
```

## 

And that gives us... 

```{r}
#| label: barchart8

ggplot(dem_summary, aes(x = region, y = polyarchy)) + 
  geom_col(fill = "steelblue") +
  labs(
    x = "Region", 
    y = "Avg. Polyarchy Score", 
    title = "Democracy by region, 1990 - present", 
    caption = "Source: V-Dem Institute"
    )
```

## 

Next, we reorder the bars with `fct_reorder()` from the `forcats` package. 

<br>

```{r}
#| label: barchart9
#| echo: true
#| output: false
#| code-line-numbers: "1"

library(forcats)

ggplot(dem_summary, aes(x = fct_reorder(region, -polyarchy), y = polyarchy)) +
  geom_col(fill = "steelblue") + 
  labs(
    x = "Region", 
    y = "Avg. Polyarchy Score", 
    title = "Democracy by region, 1990 - present", 
    caption = "Source: V-Dem Institute"
    )
```

<br> 

Note that we could also use the base R `reorder()` function here.

## 

This way, we get a nice, visually appealing ordering of the bars according to levels of democracy...

```{r}
#| label: barchart10

ggplot(dem_summary, aes(x = fct_reorder(region, -polyarchy), y = polyarchy)) +
  geom_col(fill = "steelblue") + 
  labs(
    x = "Region", 
    y = "Avg. Polyarchy Score", 
    title = "Democracy by region, 1990 - present", 
    caption = "Source: V-Dem Institute"
    )
```

## 

<br>

Now let's change the theme to `theme_minimal()`. 

<br>

```{r}
#| label: barchart11
#| echo: true
#| output: false
#| code-line-numbers: "8"

ggplot(dem_summary, aes(x = reorder(region, -polyarchy), y = polyarchy)) +
  geom_col(fill = "steelblue") + 
  labs(
    x = "Region", 
    y = "Avg. Polyarchy Score", 
    title = "Democracy by region, 1990 - present", 
    caption = "Source: V-Dem Institute"
    ) + theme_minimal()
```

## 

Gives us a clean, elegant look. 

```{r}
#| label: barchart12

ggplot(dem_summary, aes(x = reorder(region, -polyarchy), y = polyarchy)) +
  geom_col(fill = "steelblue") + 
  labs(
    x = "Region", 
    y = "Avg. Polyarchy Score", 
    title = "Democracy by region, 1990 - present", 
    caption = "Source: V-Dem Institute"
    ) + theme_minimal()
```


##

<br>

Note that you can also save your plot as an object to modify later.

<br>

```{r}
#| label: barchart13
#| echo: true
#| output: false

dem_bar_chart <- ggplot(dem_summary, aes(x = reorder(region, -polyarchy), y = polyarchy)) +
  geom_col(fill = "steelblue")
```

##

Which gives us...

```{r}
#| label: barchart14
#| echo: true
 
dem_bar_chart
```

## 

<br> 

Now let's add back our labels... 

<br>

```{r}
#| label: barchart15
#| echo: true
#| output: false

dem_bar_chart <- dem_bar_chart +
  labs(
    x = "Region", 
    y = "Avg. Polyarchy Score", 
    title = "Democracy by region, 1990 - present", 
    caption = "Source: V-Dem Institute"
    )
```

##

So now we have... 

```{r}
#| label: barchart16
#| echo: true

dem_bar_chart
```

## 

<br> 

And now we'll add back our theme...

<br>

```{r}
#| label: barchart17
#| echo: true
#| output: false

dem_bar_chart <- dem_bar_chart + theme_minimal()
```

##

Voila! 

```{r}
#| label: barchart18
#| echo: true

dem_bar_chart
```

##

Change the theme. There are many [themes](https://ggplot2.tidyverse.org/reference/ggtheme.html) to choose from.

```{r}
#| label: barchart19
#| echo: true

dem_bar_chart + theme_bw()
```

## Your Turn!

1. `glimpse()` the data
2. Find a new variable to visualize
3. Make a bar chart with it
4. Change the [color](http://sape.inf.usi.ch/quick-reference/ggplot2/colour) of the bars
5. Order the bars
6. Add labels
7. Add a [theme](https://ggplot2.tidyverse.org/reference/ggtheme.html)
8. Try saving your plot as an object
9. Then change the labels and/or theme

```{r}
#| label: timer2
countdown::countdown(minutes = 10, id = "timer2")
```


```{r}
#| label: vdem_setup_2
#| include: false

polyarchy_annual <- vdem %>%
  group_by(year) %>%
  summarize(
    polyarchy = mean(v2x_polyarchy, na.rm = TRUE),
    gdp_pc = mean(e_gdppc, na.rm = TRUE)*1000
  ) %>%
  mutate(
    wave = case_when(year <= 1827 ~ "pre 1st wave",
                       year > 1827 & year <= 1926 ~ "1st wave", 
                       year > 1926 & year <= 1945 ~ "1st rev. wave",
                       year > 1945 & year <= 1962 ~ "2nd wave", 
                       year > 1962 & year <= 1973 ~ "2nd rev. wave", 
                       year > 1973 & year <= 2010 ~ "3rd wave", 
                       year > 2010 ~ "3rd rev. wave") %>%
      factor(levels = c("pre 1st wave", "1st wave", "1st rev. wave",
                        "2nd wave", "2nd rev. wave", "3rd wave", "3rd rev. wave"))
  ) %>%
  drop_na()
```

## Links to Classwork Folders

- [Box](https://gwu.box.com/s/9xwaelyhv7uibtegxrgh80vgo7da10ie)
- [Dropbox](https://www.dropbox.com/scl/fo/g4tdpdwcij78nyydvr4bp/h?rlkey=hctskhle6222csnwre5ir9gz3&dl=0)

## Huntington's Three Waves

```{r}
#| label: huntington
region_plot <- ggplot(polyarchy_annual, aes(x = gdp_pc, y = polyarchy)) + 
  geom_point(aes(color = wave)) + 
  geom_smooth(method = "lm", se = FALSE, size = .75) + 
  scale_x_log10(label = scales::label_dollar()) +
  aes(label = year) +
  labs(x= "GDP Per Capita", y = "Polyarchy Score",
       title = "Democracy, development and Huntington's three waves") +
  scale_color_discrete(name = "Wave")

ggplotly(region_plot, tooltip = c("year", "polyarchy")) %>%   
  # add source
  layout(annotations = list(text = "Source: The V-Dem Institute, Varities of Democracy Dataset",  
                            font = list(size = 10), showarrow = FALSE,
                            xref = 'paper', x = 1, xanchor = 'right', xshift = 100,
                            yref = 'paper', y = -.1, yanchor = 'auto', yshift = 0)) %>%
  # add web address
  layout(annotations = list(text = "www.psc2339.com", 
                            font = list(size = 10, color = 'grey'), showarrow = FALSE,
                            xref = 'paper', x = .5, xanchor = 'center', xshift = 0,
                            yref = 'paper', y = 1, yanchor = 'top', yshift = 0))
```

## Setup

```{r}
#| label: dem_waves_setup
#| echo: true
#| output: false

library(vdemdata)
library(tidyverse)

dem_waves_ctrs <- vdem |>
  select(
    country = country_name,     
    year, 
    polyarchy = v2x_polyarchy, 
  ) |>
  filter( 
    country %in% c("United States of America", # select countries in this list
                   "Japan", 
                   "Portugal")
    )

write_csv(dem_waves_ctrs, "data/dem_waves_ctrs.csv")
```

```{r}
#| label: exercise1_timer
countdown::countdown(minutes = 2, 
                     id = "setup", 
                     #bottom = "10%", 
                     #right = "10%",
                     color_border = "#fff",
                     color_text = "#fff",
                     color_running_background = "#42affa",
                     color_running_text = "black",
                     color_finished_background = "#E5D19D",
                     color_finished_text = "#00264A")
```

## Line Chart

```{r}
#| label: geom_line1

# in this ggplot() call, we add a third dimension for line color
dem_waves_chart <- ggplot(dem_waves_ctrs, aes(x = year, y = polyarchy, color = country)) +
  geom_line(linewidth = 1) + # our geom is a line with a width of 1
  labs(
    x = "Year", 
    y = "Polyarchy Score", 
    title = 'Democracy in countries representing three different "waves"', 
    caption = "Source: V-Dem Institute", 
    color = "Country" # make title of legend to upper case
  )

dem_waves_chart
```

##

<br>

Here is the code... 

<br>

```{r}
#| label: geom_line2
#| eval: false
#| echo: true

# in this ggplot() call, we add a third dimension for line color
ggplot(dem_waves_ctrs, aes(x = year, y = polyarchy, color = country)) +
  geom_line(linewidth = 1) + # our geom is a line with a width of 1
  labs(
    x = "Year", 
    y = "Polyarchy Score", 
    title = 'Democracy in countries representing three different "waves"', 
    caption = "Source: V-Dem Institute", 
    color = "Country" # make title of legend to upper case
  )
```

## 

<br>

Use `geom_line()` to specify a line chart... 

<br>

```{r}
#| label: geom_line3
#| echo: true
#| eval: false
#| code-line-numbers: "3"

# in this ggplot() call, we add a third dimension for line color
ggplot(dem_waves_ctrs, aes(x = year, y = polyarchy, color = country)) +
  geom_line(linewidth = 1) + # our geom is a line with a width of 1
  labs(
    x = "Year", 
    y = "Polyarchy Score", 
    title = 'Democracy in countries representing three different "waves"', 
    caption = "Source: V-Dem Institute", 
    color = "Country" # make title of legend to upper case
  )
```

## 

<br>

Add third dimension to the `aes()` call for line color...

<br>

```{r}
#| label: geom_line4
#| echo: true
#| eval: false
#| code-line-numbers: "2"

# in this ggplot() call, we add a third dimension for line color
ggplot(dem_waves_ctrs, aes(x = year, y = polyarchy, color = country)) +
  geom_line(linewidth = 1) + # our geom is a line with a width of 1
  labs(
    x = "Year", 
    y = "Polyarchy Score", 
    title = 'Democracy in countries representing three different "waves"', 
    caption = "Source: V-Dem Institute", 
    color = "Country" # make title of legend to upper case
  )
```

## 

<br>

Modify the legend title...

<br>

```{r}
#| label: geom_line5
#| echo: true
#| eval: false
#| code-line-numbers: "9"

# in this ggplot() call, we add a third dimension for line color
ggplot(dem_waves_ctrs, aes(x = year, y = polyarchy, color = country)) +
  geom_line(linewidth = 1) + # our geom is a line with a width of 1
  labs(
    x = "Year", 
    y = "Polyarchy Score", 
    title = 'Democracy in countries representing three different "waves"', 
    caption = "Source: V-Dem Institute", 
    color = "Country" # make title of legend to upper case
  )
```

## Problem

```{r}
#| label: cvd_plot

library(colorBlindness)

cvdPlot(dem_waves_chart)
```

## Color Blindness

<br>

- Color Vision Deficiency (CVD) or color blindness affects 8 percent of men and 1 in 200 women
- There are different types of CVD but most common is red-green color blindness
- Therefore, don't include red and green in the same chart! 
- Look for color blind safe palettes

## 

**Solution:** Use a colorblind safe color scheme like `viridis`...

```{r}
#| label: geom_line6

# in this ggplot() call, we add a third dimension for line color
dem_waves_viridis <- ggplot(dem_waves_ctrs, aes(x = year, y = polyarchy, color = country)) +
  geom_line(linewidth = 1) + # our geom is a line with a width of 1
  labs(
    x = "Year", 
    y = "Polyarchy Score", 
    title = 'Democracy in countries representing three different "waves"', 
    caption = "Source: V-Dem Institute", 
    color = "Country" # make title of legend to upper case
  ) +
  scale_color_viridis_d(option = "mako", end = .8) # use viridis color palette

dem_waves_viridis
```

##

<br>

Use `scale_color_viridis_d()` in this case to specify the viridis color scheme...

```{r}
#| label: geom_line7
#| echo: true
#| eval: false
#| code-line-numbers: "11"

# in this ggplot() call, we add a third dimension for line color
ggplot(dem_waves_ctrs, aes(x = year, y = polyarchy, color = country)) +
  geom_line(linewidth = 1) + # our geom is a line with a width of 1
  labs(
    x = "Year", 
    y = "Polyarchy Score", 
    title = 'Democracy in countries representing three different "waves"', 
    caption = "Source: V-Dem Institute", 
    color = "Country" # make title of legend to upper case
  ) +
  scale_color_viridis_d(option = "mako", end = .8) # use viridis color palette
```

## Better!

```{r}
#| label: cvdplot2

cvdPlot(dem_waves_viridis)
```

## Palettes

<br>

- There are a number of viridis palettes
- See [this reference](https://search.r-project.org/CRAN/refmans/viridisLite/html/viridis.html) to view different palettes and options
- You can also use `scale_color_viridis_c()` to specify a continuous color scale 
- Also check out the [paletteer package](https://emilhvitfeldt.github.io/paletteer/) for easy access to many more palettes

## Your Turn!

<br>

- See table three of [this article](https://kurzman.unc.edu/wp-content/uploads/sites/1410/2011/06/Kurzman_Waves_of_Democratization.pdf)
- Select three countries to visualize
- Adjust setup code to filter data on those countries 
- Visualize with `geom_line()`
- Use `scale_color_viridis_d()` to specify a viridis color scheme

```{r}
#| label: scatterplot_timer
countdown::countdown(minutes = 10, 
                     id = "scatter_plot_timer", 
                     bottom = "10%", 
                     right = "10%")
```

## Scatter Plot Setup

<br>

```{r}
#| label: scatter_plot_setup
#| echo: true

dem_summary_ctry <- read_csv("data/dem_women.csv") |>
  group_by(country, region) |> # group by country, keep region
  summarize(
    polyarchy = mean(polyarchy, na.rm = TRUE),
    gdp_pc = mean(gdp_pc, na.rm = TRUE), 
    flfp = mean(flfp, na.rm = TRUE), 
    women_rep = mean(women_rep, na.rm = TRUE)
  )
```

## Scatter Plot

```{r}
#| label: scatter1
#| code-fold: true

ggplot(dem_summary_ctry, aes(x = gdp_pc, y = polyarchy, color = region, size = women_rep)) + 
  geom_point() + # use geom_point() for scatter plots
  scale_x_log10(labels = scales::label_number(prefix = "$", suffix = "k")) +
  labs(
    x= "GDP per Capita", 
    y = "Polyarchy Score",
    title = "Wealth and democracy, 1990 - present", 
    caption = "Source: V-Dem Institute", 
    color = "Region",
    size = "Women Reps"
    ) + 
  scale_color_viridis_d(option = "inferno", end = .8)
```

## Scatter Plot

<br>

Use `geom_point()`...

```{r}
#| label: scatter2
#| echo: true
#| eval: false
#| code-line-numbers: "2"

ggplot(dem_summary_ctry, aes(x = gdp_pc, y = polyarchy, color = region, size = women_rep)) +
  geom_point() + # use geom_point() for scatter plots
  scale_x_log10(labels = scales::label_number(prefix = "$", suffix = "k")) +
  labs(
    x= "GDP per Capita", 
    y = "Polyarchy Score",
    title = "Wealth and democracy, 1990 - present", 
    caption = "Source: V-Dem Institute", 
    color = "Region",
    size = "Women Reps"
    ) +
  scale_color_viridis_d(option = "inferno", end = .8)
```

## Scatter Plot

<br>

Four dimensions... 

```{r}
#| label: scatter3
#| echo: true
#| eval: false
#| code-line-numbers: "1-1"

ggplot(dem_summary_ctry, aes(x = gdp_pc, y = polyarchy, color = region, size = women_rep)) + 
  geom_point() + # use geom_point() for scatter plots
  scale_x_log10(labels = scales::label_number(prefix = "$", suffix = "k")) +
  labs(
    x= "GDP per Capita", 
    y = "Polyarchy Score",
    title = "Wealth and democracy, 1990 - present", 
    caption = "Source: V-Dem Institute", 
    color = "Region",
    size = "Women Reps"
    ) +
  scale_color_viridis_d(option = "inferno", end = .8)
```

## Scatter Plot

<br>

Stretch axis on log scale and use `scales` package to adjust labels...

```{r}
#| label: scatter4
#| echo: true
#| eval: false
#| code-line-numbers: "3"

ggplot(dem_summary_ctry, aes(x = gdp_pc, y = polyarchy, color = region, size = women_rep)) + 
  geom_point() + # use geom_point() for scatter plots
  scale_x_log10(labels = scales::label_number(prefix = "$", suffix = "k")) +
  labs(
    x= "GDP per Capita", 
    y = "Polyarchy Score",
    title = "Wealth and democracy, 1990 - present", 
    caption = "Source: V-Dem Institute", 
    color = "Region",
    size = "Women Reps"
    ) +
  scale_color_viridis_d(option = "inferno", end = .8)
```


## Scatter Plot

<br>

Change legend titles... 

```{r}
#| label: scatter5
#| echo: true
#| eval: false
#| code-line-numbers: "9-10"

ggplot(dem_summary_ctry, aes(x = gdp_pc, y = polyarchy, color = region, size = women_rep)) + 
  geom_point() + # use geom_point() for scatter plots
  scale_x_log10(labels = scales::label_number(prefix = "$", suffix = "k")) +
  labs(
    x= "GDP per Capita", 
    y = "Polyarchy Score",
    title = "Wealth and democracy, 1990 - present", 
    caption = "Source: V-Dem Institute", 
    color = "Region",
    size = "Women Reps"
    ) +
  scale_color_viridis_d(option = "inferno", end = .8)
```

## Your Turn! 

- There are four variables in `dem_summary_ctry`
- Pick one related to women's empowerment
- Visualize it on the y-axis with `gdp_pc` or `polyarchy` on the x-axis 
- Change labels and legend titles to match your visualization
- Interpret your plot

```{r}
#|label: dem_waves_time
countdown::countdown(minutes = 5, 
                     id = "women_emp")
```

## Add a Trend Line

```{r}
#| label: trend_line1

ggplot(dem_summary_ctry, aes(x = gdp_pc, y = polyarchy)) + 
  geom_point(aes(color = region)) + 
  geom_smooth(method = "lm", linewidth = 1) + 
  scale_x_log10(labels = scales::label_number(prefix = "$", suffix = "k")) +
  labs(
    x= "GDP per Capita", 
    y = "Polyarchy Score",
    title = "Wealth and democracy, 1990 - present", 
    caption = "Source: V-Dem Institute", 
    color = "Region"
    ) +
  scale_color_viridis_d(option = "inferno", end = .8)
```

## Add a Trend Line

<br>

```{r}
#| label: trend_line2
#| echo: true
#| eval: false
#| code-line-numbers: "3"
ggplot(dem_summary_ctry, aes(x = gdp_pc, y = polyarchy)) + 
  geom_point(aes(color = region)) + 
  geom_smooth(method = "lm", linewidth = 1) + 
  scale_x_log10(labels = scales::label_number(prefix = "$", suffix = "k")) +
  labs(
    x= "GDP per Capita", 
    y = "Polyarchy Score",
    title = "Wealth and democracy, 1990 - present", 
    caption = "Source: V-Dem Institute", 
    color = "Region"
    ) +
  scale_color_viridis_d(option = "inferno", end = .8)
```

## Add a Trend Line

<br>

Taking out size and adding color to `geom_point()` call...

```{r}
#| label: trend_line3
#| echo: true
#| eval: false
#| code-line-numbers: "1-2"
ggplot(dem_summary_ctry, aes(x = gdp_pc, y = polyarchy)) + 
  geom_point(aes(color = region)) + 
  geom_smooth(method = "lm", linewidth = 1) + 
  scale_x_log10(labels = scales::label_number(prefix = "$", suffix = "k")) +
  labs(
    x= "GDP per Capita", 
    y = "Polyarchy Score",
    title = "Wealth and democracy, 1990 - present", 
    caption = "Source: V-Dem Institute", 
    color = "Region"
    ) + 
  scale_color_viridis_d(option = "inferno", end = .8)
```

## Add a Trend Line

<br>

Changing legend titles...

```{r}
#| label: trend_line4
#| echo: true
#| eval: false
#| code-line-numbers: "5-11"
ggplot(dem_summary_ctry, aes(x = gdp_pc, y = polyarchy)) + 
  geom_point(aes(color = region)) + 
  geom_smooth(method = "lm", linewidth = 1) + 
  scale_x_log10(labels = scales::label_number(prefix = "$", suffix = "k")) +
  labs(
    x= "GDP per Capita", 
    y = "Polyarchy Score",
    title = "Wealth and democracy, 1990 - present", 
    caption = "Source: V-Dem Institute", 
    color = "Region"
    ) +
  scale_color_viridis_d(option = "inferno", end = .8)
```

## Your Turn! 

<br>

- Add a trendline to your plot
- Change the labels accordingly
- Try using `method = "loess"` instead of a "lm"

```{r}
#|label: trend_line_time
countdown::countdown(minutes = 5, 
                     id = "trend", 
                     bottom = "10%", 
                     right = "10%")
```

## Facet Wrapping

```{r}
#| label: facet_wrap0

ggplot(dem_summary_ctry, aes(x = gdp_pc, y = polyarchy)) + 
  geom_point() + 
  geom_smooth(method = "lm", linewidth = 1) + 
  facet_wrap(~ region) +
  scale_x_log10(labels = scales::label_number(prefix = "$", suffix = "k")) +
  labs(
    x= "GDP per Capita", 
    y = "Polyarchy Score",
    title = "Wealth and democracy, 1990 - present", 
    caption = "Source: V-Dem Institute"
    )
```

## Facet Wrapping

<br>

Use `facet_wrap()` with `~` before variable you want to wrap on...

```{r}
#| label: facet_wrap1
#| echo: true
#| eval: false
#| code-line-numbers: "4"
ggplot(dem_summary_ctry, aes(x = gdp_pc, y = polyarchy)) + 
  geom_point() + 
  geom_smooth(method = "lm", linewidth = 1) + 
  facet_wrap(~ region) +
  scale_x_log10(labels = scales::label_number(prefix = "$", suffix = "k")) +
  labs(
    x= "GDP per Capita", 
    y = "Polyarchy Score",
    title = "Wealth and democracy, 1990 - present", 
    caption = "Source: V-Dem Institute"
    )
```

## Facet Wrapping

<br>

What else changes? Back down to two dimensions...

```{r}
#| label: facet_wrap2
#| echo: true
#| eval: false
#| code-line-numbers: "1-2"
ggplot(dem_summary_ctry, aes(x = gdp_pc, y = polyarchy)) + 
  geom_point() + 
  geom_smooth(method = "lm", linewidth = 1) + 
  facet_wrap(~ region) +
  scale_x_log10(labels = scales::label_number(prefix = "$", suffix = "k")) +
  labs(
    x= "GDP per Capita", 
    y = "Polyarchy Score",
    title = "Wealth and democracy, 1990 - present", 
    caption = "Source: V-Dem Institute"
    )
```

## Facet Wrapping

<br>

Don't forget to take the legend title out of the captions...

```{r}
#| label: facet_wrap3
#| echo: true
#| eval: false
#| code-line-numbers: "6-11"
ggplot(dem_summary_ctry, aes(x = gdp_pc, y = polyarchy)) + 
  geom_point() + 
  geom_smooth(method = "lm", linewidth = 1) + 
  facet_wrap(~ region) +
  scale_x_log10(labels = scales::label_number(prefix = "$", suffix = "k")) +
  labs(
    x= "GDP per Capita", 
    y = "Polyarchy Score",
    title = "Wealth and democracy, 1990 - present", 
    caption = "Source: V-Dem Institute"
    )
```

## Your Turn!

<br>

- Facet wrap your scatter plot
- Use `scales = "free"` in `facet_wrap` call to fix the West
  - `facet_wrap(~ region, scales = "free")`

```{r}
#|label: facet_wrap_time
countdown::countdown(minutes = 5, 
                     id = "facet", 
                     bottom = "10%", 
                     right = "10%")
```

## Labeling Points

```{r}
#| label: geom_text1
dem_summary_ctry |> 
  filter(region == "Asia") |>
  ggplot(aes(x = gdp_pc, y = polyarchy)) + 
    geom_point() + 
    geom_text(aes(label = country), size = 2, vjust = 2) +
    geom_smooth(method = "lm", linewidth = 1) +
    scale_x_log10(labels = scales::label_number(prefix = "$", suffix = "k")) +
      labs(
        x= "GDP Per Capita", 
        y = "Polyarchy Score",
        title = "Wealth and democracy in Asia, 1990 - present", 
        caption = "Source: V-Dem Institute"
        )
```

## Labeling Points

<br>

Filter for Asia, add labels with `geom_text()`...

```{r}
#| label: geom_text2
#| echo: true
#| eval: false
#| code-line-numbers: "1-5"
dem_summary_ctry |> 
  filter(region == "Asia") |>
  ggplot(aes(x = gdp_pc, y = polyarchy)) + 
    geom_point() + 
    geom_text(aes(label = country), size = 2, vjust = 2) +
    geom_smooth(method = "lm", linewidth = 1) +
    scale_x_log10(labels = scales::label_number(prefix = "$", suffix = "k")) +
      labs(
        x= "GDP Per Capita", 
        y = "Polyarchy Score",
        title = "Wealth and democracy in Asia, 1990 - present", 
        caption = "Source: V-Dem Institute"
        )
```

## Your Turn!

<br>

- Filter for Asia or another region
- Use `geom_text()` to add labels to your points
- Play with `size` and `vjust` paramters 

```{r}
#|label: label_time
countdown::countdown(minutes = 5, 
                     id = "labels", 
                     bottom = "10%", 
                     right = "10%")
```

## Make it Interactive

```{r}
#| label: plotly1

library(plotly)

modernization_plot <- ggplot(dem_summary_ctry, aes(x = gdp_pc, y = polyarchy)) + 
  geom_point(aes(color = region)) + 
  aes(label = country) +
  geom_smooth(method = "lm", linewidth = 1) + 
  scale_x_log10(labels = scales::label_number(prefix = "$", suffix = "k")) +
  labs(
    x= "GDP per Capita", 
    y = "Polyarchy Score",
    title = "Wealth and democracy, 1990 - present", 
    caption = "Source: V-Dem Institute", 
    color = "Region"
    ) +
  scale_color_viridis_d(option = "inferno", end = .8)

ggplotly(modernization_plot, tooltip = c("country", "gdp_pc", "polyarchy"))
```

##

<br>

Use `plotly` to make any plot interactive...

```{r}
#| label: plotly2
#| echo: true
#| eval: false
#| code-line-numbers: "|1|3|5|17"
library(plotly)

modernization_plot <- ggplot(dem_summary_ctry, aes(x = gdp_pc, y = polyarchy)) + 
  geom_point(aes(color = region)) + 
  aes(label = country) +
  geom_smooth(method = "lm", linewidth = 1) + 
  scale_x_log10(labels = scales::label_number(prefix = "$", suffix = "k")) +
  labs(
    x= "GDP per Capita", 
    y = "Polyarchy Score",
    title = "Wealth and democracy, 1990 - present", 
    caption = "Source: V-Dem Institute", 
    color = "Region"
    ) +
  scale_color_viridis_d(option = "inferno", end = .8)

ggplotly(modernization_plot, tooltip = c("country", "gdp_pc", "polyarchy"))
```



